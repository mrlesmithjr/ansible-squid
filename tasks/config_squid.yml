---
- name: config_squid | Configuring Squid for parsing
  ansible.builtin.template:
    src: "{{ item.source }}"
    dest: "{{ squid_root_dir }}/{{ item.name }}-staged"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  loop: "{{ squid_config_files }}"
  become: true
  changed_when: false

- name: config_squid | Check configuration validity
  ansible.builtin.command: "{{ squid_service }} -k parse -f {{ squid_root_dir }}/{{ item.name }}-staged"
  loop: "{{ squid_config_files }}"
  when: item.name is match("squid.*")
  become: true
  changed_when: false

- name: config_squid | Clean staged config squid file
  ansible.builtin.file:
    state: absent
    path: "{{ squid_root_dir }}/{{ item.name }}-staged"
  loop: "{{ squid_config_files }}"
  when: item.name is match("squid.*")
  become: true
  changed_when: false

- name: config_squid | Configuring Squid
  ansible.builtin.template:
    src: "{{ item.source }}"
    dest: "{{ squid_root_dir }}/{{ item.name }}"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  loop: "{{ squid_config_files }}"
  become: true
  notify: "restart {{ squid_service }}"

- name: SSL database configuration
  when: squid_ssl_bump is defined and squid_ssl_bump != []
  block:
    - name: config_squid | Initialize the SSL database to be used by squid
      ansible.builtin.command: "{{ squid_security_file_certgen }} -c -s {{ squid_ssl_database }} -M 4MB"
      args:
        creates: "{{ squid_ssl_database }}"

    - name: Give rights to squid on SSL database
      ansible.builtin.file:
        path: "{{ squid_ssl_database }}"
        state: directory
        recurse: yes
        owner: squid
        group: squid
